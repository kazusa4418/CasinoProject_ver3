package util.playingcard;

/**
 * This class expresses a card of playing card.
 * <p> Objects represent cards used int games playing card such as poker and blackjack.
 * It is possible to realize a card game by using this class and {@link CardStock}
 * expressing a stock of cards and {@link Hand} representing a hand.
 *
 * <p> It is recommended that this class use an object automatically generated by
 * the {@link CardStock} rather than actually being instantiated by the client.
 *
 * <p> Numbers and suits on cards are defined by enum type, respectively.
 * When comparing objects of this class, compare by invoking {@link #strength()}
 * of enum type object of {@link CardNumber} or {@link CardSuit} according to
 * condition to compare.
 *
 * <p> There are two ways to create objects of this class. The following method is
 * to instantiate by giving {@link CardNumber} type object and {@link CardSuit} type
 * object as arguments.<p> Here is an example of creating an object of a card with
 * a "number 1" and "suit SPADE".
 *
 * <pre>
 * PlayingCard cd =
 *      new PlayingCard(CardNumber.num1, CardSuit.SPADE);
 * </pre>
 *
 * <p> An example of how to instantiate by giving an argument as an int type is shown below.
 * See {@link #PlayingCard(int, int)} for specifying int type argument to give.
 *
 * <pre>
 * PlayingCard cd = new PlayingCard(1, 1);
 * </pre>
 *
 *
 * It is also possible to compare in natural order of playing cards using
 * {@link #strength()} of each PlayingCard type object.  The natural order in this case
 * is {@code "number > suit"}, the numbers are stronger in order of 1 to 13, and the suits
 * are {@code "spade > heart > diamond > clover"} in that order.
 *
 * @author kazusa4418
 * @see CardNumber
 * @see CardSuit
 * @see CardStock
 * @see Card
 * @version 1.0
 */
public class PlayingCard implements Card {
    /** Field that represent card figures */
    private final CardNumber number;
    /** Field that represents a suit of a card */
    private final CardSuit suit;

    /**
     * Creates a card of playing card.
     * <p>
     * Creates a PlayingCard type object from two given arguments, but if the argument
     * includes CardNumber.JOKER or CardSuit.JOKER, all arguments must be JOKER.
     * Also, it is impossible to specify null as an argument. Objects with only numeric
     * characters or objects with only suits are not playing card. Define another class
     * and use it.
     *
     * @param number  A {@code CardNumber} type object to be given to the object to be
     *                created. It can not be null.
     *
     * @param suit    A {@code CardSuit} type object to be given to the object to be
     *                created. It can not be null.
     *
     * @throws IllegalArgumentException
     *                If the argument contains null. A case where one of the arguments
     *                is a value expressing "JOKER" and the other is not a value
     *                expressing "JOKER".
     *
     * @version 1.0
     */
    public PlayingCard(CardNumber number, CardSuit suit) {
        nullCheck(number, suit);
        checkArgument(number, suit);
        this.number = number;
        this.suit = suit;
    }

    private void nullCheck(CardNumber num, CardSuit suit) {
        if (num == null || suit == null)
            throw new IllegalArgumentException();
    }

    private void checkArgument(CardNumber number, CardSuit suit) {
        if ((number.isJOKER() && !suit.isJOKER()) ||
                (!number.isJOKER() && suit.isJOKER())) {
            throw new IllegalArgumentException();
        }
    }

    public PlayingCard(int number, int suit) {
        checkArgument(number, suit);
        CardNumber[] numbers = CardNumber.values();
        CardSuit[] suits = CardSuit.values();
        this.number = numbers[number];
        this.suit = suits[suit];
    }

    private void checkArgument(int number, int suit) {
        if (number == 0 && suit == 0) return;
        if (number < 1 || suit < 1 || number > 13 || suit > 4)
            throw new IllegalArgumentException();
    }

    public CardNumber getNum() {
        return this.number;
    }

    public CardSuit getSuit() {
        return this.suit;
    }

    public int strength() {
        return this.getNum().strength() * 10
                + this.getSuit().strength();
    }

    public boolean isJOKER() {
        return this.strength() == 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof PlayingCard) {
            PlayingCard card = (PlayingCard) obj;
            return card.number
                    == this.number && card.suit == this.suit;
        } else return false;
    }

    @Override
    public int hashCode() {
        int result = 13;
        result = 31 * result * number.strength();
        result = 31 * result * suit.strength();
        return result;
    }

    @Override
    public String toString() {
        if (this.strength() == 0)
            return "(JOKER)";
        return String.format("(%s%s)", this.number, this.suit);
    }

    public String toString(boolean flag) {
        return flag ? this.number.toString()
                    : this.suit.toString();
    }
}
